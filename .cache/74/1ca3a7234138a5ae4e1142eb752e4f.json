{"id":"ts/lib/base/types.ts","dependencies":[{"name":"C:\\Programming\\projects\\typescript\\ts-test\\tsconfig.json","includedInParent":true,"mtime":1557682756384},{"name":"C:\\Programming\\projects\\typescript\\ts-test\\package.json","includedInParent":true,"mtime":1557917779471}],"generated":{"js":"\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CommandNotFoundError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(CommandNotFoundError, _Error);\n\n  function CommandNotFoundError() {\n    _classCallCheck(this, CommandNotFoundError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CommandNotFoundError).call(this, 'Command not found'));\n  }\n\n  return CommandNotFoundError;\n}(_wrapNativeSuper(Error));\n\nexports.CommandNotFoundError = CommandNotFoundError;"},"sourceMaps":{"js":{"mappings":[{"source":"ts/lib/base/types.ts","name":null,"original":{"line":57,"column":13},"generated":{"line":29,"column":4}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":34,"column":0}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":34,"column":34}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":35,"column":0}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":37,"column":0}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":59,"column":10},"generated":{"line":37,"column":93}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":58,"column":2},"generated":{"line":37,"column":112}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":60,"column":3},"generated":{"line":38,"column":0}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":57,"column":42},"generated":{"line":41,"column":19}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":57,"column":0},"generated":{"line":43,"column":0}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":57,"column":0},"generated":{"line":43,"column":7}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":57,"column":0},"generated":{"line":43,"column":8}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":57,"column":0},"generated":{"line":43,"column":28}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":57,"column":0},"generated":{"line":43,"column":31}},{"source":"ts/lib/base/types.ts","name":null,"original":{"line":57,"column":0},"generated":{"line":43,"column":51}}],"sources":{"ts/lib/base/types.ts":"import BaseIOEntity from './BaseIOEntity';\r\n\r\nexport type CommandDefinition  = {\r\n  text: string,\r\n  action: Action,\r\n  validation: Validation,\r\n  aliases ?: string[] | string,\r\n  flags ?: Array<string | Flag>,\r\n  info ?: string;\r\n}\r\n\r\nexport type Context = {\r\n  params: string[],\r\n  flags: FlagsHash;\r\n  processed ?: any;\r\n  caller: BaseIOEntity;\r\n};\r\n\r\nexport type ValidationResult = {\r\n  result: boolean,\r\n  error?: Error,\r\n  processed ?: any } | boolean;\r\n\r\nexport type Action = (ctx: Context) => Promise<Error | void>;\r\nexport type Validation = (ctx: Context) => ValidationResult;\r\n\r\n// Функция валидации должна создавать объект c полем result: boolean; \r\n\r\nexport type Flag = {\r\n  name: string,\r\n  info: string,\r\n  aliases: string[],\r\n  type: 'boolean' | 'string'\r\n};\r\n\r\nexport interface FlagsHash {\r\n  [flagName: string] : string | boolean\r\n}\r\n\r\nexport type CommandInfo = {\r\n  name: string;\r\n  aliases: string[];\r\n  info: string;\r\n  flags: Flag[];\r\n}\r\n\r\nexport type BaseIOCallback = (event: any) => void;\r\n\r\nexport type EventHandler = (args: any) => void;\r\n\r\nexport interface IEventEmitter {\r\n  on: (eventName: string, handler: EventHandler) => void;\r\n  off: (eventName: string, handler: EventHandler) => void;\r\n  emit: (eventName: string, args: any) => void;\r\n}\r\n\r\nexport class CommandNotFoundError extends Error {\r\n  constructor() {\r\n    super('Command not found');\r\n  }\r\n}\r\n\r\n"},"lineCount":null}},"error":null,"hash":"25ec865974b2b8fb1e4e08fe805834f4","cacheData":{"env":{}}}